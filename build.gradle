/*
 * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 */

plugins {
    id "java"
    id "application"
    id "maven-publish"
    id 'com.github.johnrengelman.shadow' version '4.0.3'
    id "com.github.spotbugs" version "${spotbugsPluginVersion}"
    id "io.franzbecker.gradle-lombok" version "${gradleLombokPluginVersion}"
    id "checkstyle"
    id "jacoco"
}

tasks.withType(JavaCompile) {
    options.release = 11
}

apply from: "$rootDir/gradle/checkstyle.gradle"
apply from: "$rootDir/gradle/spotbugs.gradle"
apply from: "$rootDir/gradle/jacoco.gradle"

group = "io.pravega"
description = "Pravega Data Importer"

// Allow main class name to be specified with -PmainClass=xxx.
application {
    mainClassName = project.hasProperty("mainClass") ? getProperty("mainClass") : "io.pravega.dataimporter.Main"
}

version '0.1.0-SNAPSHOT'

repositories {
    mavenLocal()
    mavenCentral()
    maven {
        url "https://oss.jfrog.org/jfrog-dependencies"
    }
    maven {
        url "https://repository.apache.org/snapshots"
    }
    maven {
        url "https://oss.sonatype.org/content/repositories/snapshots"
    }
}

configurations {
    flinkShadowJar // dependencies which go into the shadowJar

    // always exclude these (also from transitive dependencies) since they are provided by Flink
    flinkShadowJar.exclude group: 'org.apache.flink', module: 'force-shading'
    flinkShadowJar.exclude group: 'com.google.code.findbugs', module: 'jsr305'
    flinkShadowJar.exclude group: 'org.slf4j'
    flinkShadowJar.exclude group: 'log4j'
}

shadowJar {
    configurations = [project.configurations.flinkShadowJar]
}

dependencies {
    // --------------------------------------------------------------
    // Compile-time dependencies that should NOT be part of the
    // shadow jar and are provided in the lib folder of Flink
    // --------------------------------------------------------------
    compileOnly group: 'com.github.spotbugs', name: 'spotbugs-annotations', version: "${spotbugsAnnotationsVersion}"
    compileOnly 'org.projectlombok:lombok:' + "${lombokVersion}"
    annotationProcessor 'org.projectlombok:lombok:' + "${lombokVersion}"
    testAnnotationProcessor 'org.projectlombok:lombok:' + "${lombokVersion}"
    implementation "org.apache.flink:flink-clients:${flinkVersion}"
    implementation "io.pravega:pravega-connectors-flink-${flinkShortVersion}_${flinkScalaVersion}:${pravegaFlinkConnectorVersion}"
    implementation "io.pravega:pravega-client:0.12.0"
    implementation "io.pravega:pravega-keycloak-client:${pravegaCredentialsVersion}"
    implementation "org.slf4j:slf4j-api:${slf4jApiVersion}"
    implementation "ch.qos.logback:logback-classic:${logbackVersion}"
    implementation "ch.qos.logback:logback-core:${logbackVersion}"
    implementation 'info.picocli:picocli:4.7.0'
    implementation "com.google.guava:guava:${guavaVersion}"

    flinkShadowJar "io.pravega:pravega-connectors-flink-${flinkShortVersion}_${flinkScalaVersion}:${pravegaFlinkConnectorVersion}"
    flinkShadowJar "org.apache.flink:flink-connector-kafka:${flinkVersion}"
    // Schema registry dependencies required due to https://github.com/pravega/flink-connectors/issues/440
    flinkShadowJar group: 'io.pravega', name: 'schemaregistry-serializers', classifier: 'all', version: pravegaSchemaRegistryVersion

    testImplementation 'net.mguenther.kafka:kafka-junit:3.2.2'
    testImplementation 'io.pravega:pravega-standalone:0.12.0'
    testImplementation 'io.pravega:pravega-test-integration:0.12.0'
    testImplementation 'io.pravega:pravega-common:0.12.0'
    //implementation 'io.pravega:pravega-common:0.12.0'
    testImplementation "org.apache.flink:flink-test-utils:${flinkVersion}"
    testCompileOnly "junit:junit:${junitVersion}"
    testCompileOnly group: 'com.github.spotbugs', name: 'spotbugs-annotations', version: "${spotbugsAnnotationsVersion}"
    testCompileOnly 'org.projectlombok:lombok:' + "${lombokVersion}"

    testCompileOnly "com.google.guava:guava:${guavaVersion}"
    testImplementation "com.google.guava:guava:${guavaVersion}"

    configurations.all {
        resolutionStrategy {
            force "com.google.guava:guava:" + guavaVersion
            force "io.grpc:grpc-context:1.47.0"
            //exclude group: 'com.google.guava:guava', module: 'guava'
        }
    }
}

// make compileOnly dependencies available for tests:
sourceSets {
    main.compileClasspath += configurations.flinkShadowJar
    main.runtimeClasspath += configurations.flinkShadowJar

    test.compileClasspath += configurations.flinkShadowJar
    test.runtimeClasspath += configurations.flinkShadowJar

    javadoc.classpath += configurations.flinkShadowJar
}

run.classpath = sourceSets.main.runtimeClasspath

tasks.withType(Test) {
    jvmArgs = ["-Xmx2g"]
}

jar {
    manifest {
        attributes 'Built-By': System.getProperty('user.name'),
                'Build-Jdk': System.getProperty('java.version')
    }
}

task copyToLib(type: Copy) {
    into "lib"
    from shadowJar
}

test {
    useJUnitPlatform()
}

build.dependsOn(copyToLib)